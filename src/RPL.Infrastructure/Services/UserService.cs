using Ardalis.Result;
using IdentityModel;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using RPL.Core.DTOs;
using RPL.Core.Entities;
using RPL.Core.Interfaces;
using System;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;

namespace RPL.Infrastructure.Services
{
    public class UserService : IUserService
    {
        private readonly UserManager<ApplicationUser> _userManager;
        private readonly ISmsSender _smsSender;

        public UserService(
            UserManager<ApplicationUser> userManager,
            ISmsSender smsSender)
        {
            _userManager = userManager;
            _smsSender = smsSender;
        }

        public async Task<Result<ApplicationUser>> CreateUserAsync(ApplicationUser user, string autoGeneratedPassword, string role)
        {
            var existingUser = await _userManager.Users.FirstOrDefaultAsync(q => q.UserName == user.UserName && q.Status);
            if (existingUser != null)
            {
                return Result<ApplicationUser>.Error(new[] { $"User account already exists. Please login using the phone number { user.PhoneNumber }." });
            }

            user.Status = true;
            user.CreatedDate = DateTime.UtcNow;
            user.UpdatedDate = DateTime.UtcNow;

            var result = await _userManager.CreateAsync(user, autoGeneratedPassword);

            if (!result.Succeeded)
            {
                return Result<ApplicationUser>.Error(result.Errors.Select(e => e.Description).ToArray());
            }

            await _userManager.AddClaimsAsync(user, new[]
            {
                new Claim(JwtClaimTypes.Name, user.UserName),
                new Claim(JwtClaimTypes.Role, role)
            });

            return Result<ApplicationUser>.Success(user);
        }

        public async Task<Result<string>> VerifyUserPhoneNumberAsync(string phoneNumber, string verificationCode)
        {
            var user = await _userManager.FindByNameAsync(phoneNumber);

            if (user == null)
            {
                return Result<string>.Error(new[] { $"User account does not exist." });
            }

            if (user.Status == false)
            {
                return Result<string>.Error(new[] { $"User account is deactivated." });
            }

            if (user.PhoneNumberConfirmed == true)
            {
                return Result<string>.Error(new[] { $"User account is alrady verified." });
            }

            if (user.VerificationCode != verificationCode)
            {
                return Result<string>.Error(new[] { $"Invalid verification code." });
            }

            if (user.VerificationCodeExpiryDate < DateTime.UtcNow)
            {
                return Result<string>.Error(new[] { $"Expired verification code." });
            }

            user.PhoneNumberConfirmed = true;
            await _userManager.UpdateAsync(user);

            return Result<string>.Success("", "User account is verified successfully.");
        }
    }
}
